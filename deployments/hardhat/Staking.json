{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_stakedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unStaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accRewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingReword",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "setRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x91954920e99fb5ff40fbd396875801a653512668c31b6142e3f4688e041c937c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1558359",
    "logsBloom": "0x
    "blockHash": "0xcc12a84afc96867c4c0b968c309414d4a9c53649c90d95e46682bdc249af652a",
    "transactionHash": "0x91954920e99fb5ff40fbd396875801a653512668c31b6142e3f4688e041c937c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x91954920e99fb5ff40fbd396875801a653512668c31b6142e3f4688e041c937c",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcc12a84afc96867c4c0b968c309414d4a9c53649c90d95e46682bdc249af652a"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "1558359",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    5
  ],
  "solcInputHash": "ca2bad4451938c0a40b663c268442b97",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unStaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingReword\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Staking is Ownable {\\n    using SafeERC20 for IERC20;\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt; //minchev user arac verjin gorcoxutyuny , matyanic inchqan e - exel\\n    }\\n    uint256 public accRewardPerShare; //yndhanur matyan\\n    uint256 public rewardPerBlock; //amen bloki hamar talis esqan pox\\n    uint256 public lastRewardBlock; //qani bloka ancel verjin angam\\n    uint256 public totalStaked;\\n    mapping(address => UserInfo) public userInfo;\\n    IERC20 public stakedToken;\\n    event Stake(address indexed user, uint256 amount);\\n    event Claim(address indexed user, uint256 amount);\\n    event unStaked(address indexed user, uint256 amount);\\n\\n    constructor(IERC20 _stakedToken, uint256 _rewardPerBlock) {\\n        stakedToken = _stakedToken;\\n        rewardPerBlock = _rewardPerBlock;\\n    }\\n\\n    function stake(uint256 _amount) external {\\n        distributeReward();\\n        stakedToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        _stake(_amount);\\n    }\\n\\n    function distributeReward() public {\\n        //accamulatedReward poxeluya, lastRewardblocky poxeluya\\n        if (block.number < lastRewardBlock) {\\n            return;\\n        }\\n        if (totalStaked == 0) {\\n            lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        accRewardPerShare =\\n            accRewardPerShare +\\n            (getReward(lastRewardBlock, block.number) * 1e12) /\\n            totalStaked;\\n        lastRewardBlock = block.number;\\n    }\\n\\n    function getReward(uint256 _from, uint256 _to)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return rewardPerBlock * (_to - _from);\\n    }\\n\\n    function _stake(uint256 _amount) private {\\n        UserInfo storage user = userInfo[msg.sender];\\n        _claim();\\n        user.amount += _amount;\\n        totalStaked += _amount;\\n        user.rewardDebt = (user.amount * accRewardPerShare) / 1e12;\\n        emit Stake(msg.sender, _amount);\\n    }\\n\\n    function _claim() private {\\n        //hashvi u ta rewardnery u rewardDebt hashvi\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 pending = (user.amount * accRewardPerShare) / 1e12 -\\n            user.rewardDebt;\\n        _safeTransferReward(msg.sender, pending);\\n        emit Claim(msg.sender, pending);\\n    }\\n\\n    function claim() external {\\n        //vercnes qo kutakac rewardnery %-nery\\n        UserInfo storage user = userInfo[msg.sender];\\n        distributeReward();\\n        _claim();\\n        user.rewardDebt = (user.amount * accRewardPerShare) / 1e12;\\n    } //KANCHELU PRIVAT CLAIM U DISTRIBUTE\\n\\n    function unStake(uint256 _amount) external {\\n        //qo drac gumarnes vercnum\\n        UserInfo memory user = userInfo[msg.sender];\\n\\n        require(user.amount >= _amount, \\\"Staking::bad action\\\");\\n        distributeReward();\\n        _unstake(_amount);\\n    }\\n\\n    function _unstake(uint256 _amount) private {\\n        UserInfo storage user = userInfo[msg.sender];\\n        _claim();\\n        user.amount -= _amount;\\n        user.rewardDebt = (user.amount - accRewardPerShare) / 1e12;\\n        totalStaked -= _amount;\\n        stakedToken.safeTransfer(msg.sender, _amount);\\n\\n        emit unStaked(msg.sender, _amount);\\n    }\\n\\n    function pendingReword() external view returns (uint256) {\\n        //nayumes inchqan pending reward ka\\n        UserInfo memory user = userInfo[msg.sender];\\n        return\\n            (user.amount *\\n                accRewardPerShare +\\n                (getReward(lastRewardBlock, block.number) * 1e12) /\\n                totalStaked) /\\n            1e12 -\\n            user.rewardDebt;\\n    }\\n\\n    function _safeTransferReward(address _to, uint256 _amount) private {\\n        uint256 balance = stakedToken.balanceOf(address(this)) - totalStaked;\\n        if (_amount > balance) {\\n            stakedToken.safeTransfer(_to, balance);\\n\\n            return;\\n        }\\n        stakedToken.safeTransfer(_to, _amount);\\n    }\\n\\n    function setRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\\n        distributeReward();\\n        rewardPerBlock = _rewardPerBlock;\\n    }\\n}\\n//claim u unstake\\n\",\"keccak256\":\"0xbd7e236ee248e39a31ad2739f0c6cabd8146f12cd12597bcf5aead1ded1b1d42\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001c6938038062001c698339818101604052810190620000379190620001a1565b620000576200004b620000a760201b60201c565b620000af60201b60201c565b81600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600281905550505062000273565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008151905062000184816200023f565b92915050565b6000815190506200019b8162000259565b92915050565b60008060408385031215620001bb57620001ba6200023a565b5b6000620001cb8582860162000173565b9250506020620001de858286016200018a565b9150509250929050565b6000620001f58262000210565b9050919050565b60006200020982620001e8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b6200024a81620001fc565b81146200025657600080fd5b50565b620002648162000230565b81146200027057600080fd5b50565b6119e680620002836000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063939d623711610097578063bb872b4a11610066578063bb872b4a14610252578063cc7a262e1461026e578063f2e6d0c91461028c578063f2fde38b146102aa57610100565b8063939d6237146101ca578063a694fc3a146101e8578063a9f8d18114610204578063b90bc5191461022257610100565b8063817b1cd2116100d3578063817b1cd2146101665780638ae39cac146101845780638da5cb5b146101a25780638f73c5ae146101c057610100565b80631959a002146101055780634e71d92d146101365780635d3eea9114610140578063715018a61461015c575b600080fd5b61011f600480360381019061011a9190611179565b6102c6565b60405161012d929190611580565b60405180910390f35b61013e6102ea565b005b61015a600480360381019061015591906111d3565b61036a565b005b610164610428565b005b61016e6104b0565b60405161017b9190611565565b60405180910390f35b61018c6104b6565b6040516101999190611565565b60405180910390f35b6101aa6104bc565b6040516101b791906113ed565b60405180910390f35b6101c86104e5565b005b6101d2610551565b6040516101df9190611565565b60405180910390f35b61020260048036038101906101fd91906111d3565b610557565b005b61020c6105ba565b6040516102199190611565565b60405180910390f35b61023c6004803603810190610237919061122d565b6105c0565b6040516102499190611565565b60405180910390f35b61026c600480360381019061026791906111d3565b6105e3565b005b610276610671565b6040516102839190611468565b60405180910390f35b610294610697565b6040516102a19190611565565b60405180910390f35b6102c460048036038101906102bf9190611179565b610764565b005b60056020528060005260406000206000915090508060000154908060010154905082565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506103356104e5565b61033d61085c565b64e8d4a5100060015482600001546103559190611662565b61035f9190611631565b816001018190555050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090508181600001511015610413576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040a906114e5565b60405180910390fd5b61041b6104e5565b61042482610930565b5050565b610430610a78565b73ffffffffffffffffffffffffffffffffffffffff1661044e6104bc565b73ffffffffffffffffffffffffffffffffffffffff16146104a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049b90611505565b60405180910390fd5b6104ae6000610a80565b565b60045481565b60025481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6003544310156104f45761054f565b6000600454141561050b574360038190555061054f565b60045464e8d4a51000610520600354436105c0565b61052a9190611662565b6105349190611631565b60015461054191906115db565b600181905550436003819055505b565b60015481565b61055f6104e5565b6105ae333083600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b44909392919063ffffffff16565b6105b781610bcd565b50565b60035481565b600082826105ce91906116bc565b6002546105db9190611662565b905092915050565b6105eb610a78565b73ffffffffffffffffffffffffffffffffffffffff166106096104bc565b73ffffffffffffffffffffffffffffffffffffffff161461065f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065690611505565b60405180910390fd5b6106676104e5565b8060028190555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050806020015164e8d4a5100060045464e8d4a5100061071a600354436105c0565b6107249190611662565b61072e9190611631565b60015484600001516107409190611662565b61074a91906115db565b6107549190611631565b61075e91906116bc565b91505090565b61076c610a78565b73ffffffffffffffffffffffffffffffffffffffff1661078a6104bc565b73ffffffffffffffffffffffffffffffffffffffff16146107e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d790611505565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610850576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610847906114a5565b60405180910390fd5b61085981610a80565b50565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001015464e8d4a5100060015484600001546108be9190611662565b6108c89190611631565b6108d291906116bc565b90506108de3382610cc8565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4826040516109249190611565565b60405180910390a25050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061097b61085c565b8181600001600082825461098f91906116bc565b9250508190555064e8d4a5100060015482600001546109ae91906116bc565b6109b89190611631565b816001018190555081600460008282546109d291906116bc565b92505081905550610a263383600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610e329092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f4422f6ee26bc9bf257a2a195c5dc2ce10475a4680b47c473b2bfed7f92a7822583604051610a6c9190611565565b60405180910390a25050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610bc7846323b872dd60e01b858585604051602401610b6593929190611408565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610eb8565b50505050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610c1861085c565b81816000016000828254610c2c91906115db565b925050819055508160046000828254610c4591906115db565b9250508190555064e8d4a510006001548260000154610c649190611662565b610c6e9190611631565b81600101819055503373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a83604051610cbc9190611565565b60405180910390a25050565b6000600454600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d2891906113ed565b60206040518083038186803b158015610d4057600080fd5b505afa158015610d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d789190611200565b610d8291906116bc565b905080821115610ddf57610dd98382600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610e329092919063ffffffff16565b50610e2e565b610e2c8383600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610e329092919063ffffffff16565b505b5050565b610eb38363a9059cbb60e01b8484604051602401610e5192919061143f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610eb8565b505050565b6000610f1a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610f7f9092919063ffffffff16565b9050600081511115610f7a5780806020019051810190610f3a91906111a6565b610f79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7090611545565b60405180910390fd5b5b505050565b6060610f8e8484600085610f97565b90509392505050565b606082471015610fdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd3906114c5565b60405180910390fd5b610fe5856110ab565b611024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101b90611525565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161104d91906113d6565b60006040518083038185875af1925050503d806000811461108a576040519150601f19603f3d011682016040523d82523d6000602084013e61108f565b606091505b509150915061109f8282866110be565b92505050949350505050565b600080823b905060008111915050919050565b606083156110ce5782905061111e565b6000835111156110e15782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111159190611483565b60405180910390fd5b9392505050565b6000813590506111348161196b565b92915050565b60008151905061114981611982565b92915050565b60008135905061115e81611999565b92915050565b60008151905061117381611999565b92915050565b60006020828403121561118f5761118e6117ed565b5b600061119d84828501611125565b91505092915050565b6000602082840312156111bc576111bb6117ed565b5b60006111ca8482850161113a565b91505092915050565b6000602082840312156111e9576111e86117ed565b5b60006111f78482850161114f565b91505092915050565b600060208284031215611216576112156117ed565b5b600061122484828501611164565b91505092915050565b60008060408385031215611244576112436117ed565b5b60006112528582860161114f565b92505060206112638582860161114f565b9150509250929050565b611276816116f0565b82525050565b6000611287826115a9565b61129181856115bf565b93506112a181856020860161175c565b80840191505092915050565b6112b681611738565b82525050565b60006112c7826115b4565b6112d181856115ca565b93506112e181856020860161175c565b6112ea816117f2565b840191505092915050565b60006113026026836115ca565b915061130d82611803565b604082019050919050565b60006113256026836115ca565b915061133082611852565b604082019050919050565b60006113486013836115ca565b9150611353826118a1565b602082019050919050565b600061136b6020836115ca565b9150611376826118ca565b602082019050919050565b600061138e601d836115ca565b9150611399826118f3565b602082019050919050565b60006113b1602a836115ca565b91506113bc8261191c565b604082019050919050565b6113d08161172e565b82525050565b60006113e2828461127c565b915081905092915050565b6000602082019050611402600083018461126d565b92915050565b600060608201905061141d600083018661126d565b61142a602083018561126d565b61143760408301846113c7565b949350505050565b6000604082019050611454600083018561126d565b61146160208301846113c7565b9392505050565b600060208201905061147d60008301846112ad565b92915050565b6000602082019050818103600083015261149d81846112bc565b905092915050565b600060208201905081810360008301526114be816112f5565b9050919050565b600060208201905081810360008301526114de81611318565b9050919050565b600060208201905081810360008301526114fe8161133b565b9050919050565b6000602082019050818103600083015261151e8161135e565b9050919050565b6000602082019050818103600083015261153e81611381565b9050919050565b6000602082019050818103600083015261155e816113a4565b9050919050565b600060208201905061157a60008301846113c7565b92915050565b600060408201905061159560008301856113c7565b6115a260208301846113c7565b9392505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006115e68261172e565b91506115f18361172e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156116265761162561178f565b5b828201905092915050565b600061163c8261172e565b91506116478361172e565b925082611657576116566117be565b5b828204905092915050565b600061166d8261172e565b91506116788361172e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116b1576116b061178f565b5b828202905092915050565b60006116c78261172e565b91506116d28361172e565b9250828210156116e5576116e461178f565b5b828203905092915050565b60006116fb8261170e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006117438261174a565b9050919050565b60006117558261170e565b9050919050565b60005b8381101561177a57808201518184015260208101905061175f565b83811115611789576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5374616b696e673a3a62616420616374696f6e00000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b611974816116f0565b811461197f57600080fd5b50565b61198b81611702565b811461199657600080fd5b50565b6119a28161172e565b81146119ad57600080fd5b5056fea2646970667358221220a753ff6ecc3162f2d8665a7d7c9127b53fdb37c3a1bf1442d084c7c47ce053bc64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063939d623711610097578063bb872b4a11610066578063bb872b4a14610252578063cc7a262e1461026e578063f2e6d0c91461028c578063f2fde38b146102aa57610100565b8063939d6237146101ca578063a694fc3a146101e8578063a9f8d18114610204578063b90bc5191461022257610100565b8063817b1cd2116100d3578063817b1cd2146101665780638ae39cac146101845780638da5cb5b146101a25780638f73c5ae146101c057610100565b80631959a002146101055780634e71d92d146101365780635d3eea9114610140578063715018a61461015c575b600080fd5b61011f600480360381019061011a9190611179565b6102c6565b60405161012d929190611580565b60405180910390f35b61013e6102ea565b005b61015a600480360381019061015591906111d3565b61036a565b005b610164610428565b005b61016e6104b0565b60405161017b9190611565565b60405180910390f35b61018c6104b6565b6040516101999190611565565b60405180910390f35b6101aa6104bc565b6040516101b791906113ed565b60405180910390f35b6101c86104e5565b005b6101d2610551565b6040516101df9190611565565b60405180910390f35b61020260048036038101906101fd91906111d3565b610557565b005b61020c6105ba565b6040516102199190611565565b60405180910390f35b61023c6004803603810190610237919061122d565b6105c0565b6040516102499190611565565b60405180910390f35b61026c600480360381019061026791906111d3565b6105e3565b005b610276610671565b6040516102839190611468565b60405180910390f35b610294610697565b6040516102a19190611565565b60405180910390f35b6102c460048036038101906102bf9190611179565b610764565b005b60056020528060005260406000206000915090508060000154908060010154905082565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506103356104e5565b61033d61085c565b64e8d4a5100060015482600001546103559190611662565b61035f9190611631565b816001018190555050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090508181600001511015610413576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040a906114e5565b60405180910390fd5b61041b6104e5565b61042482610930565b5050565b610430610a78565b73ffffffffffffffffffffffffffffffffffffffff1661044e6104bc565b73ffffffffffffffffffffffffffffffffffffffff16146104a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049b90611505565b60405180910390fd5b6104ae6000610a80565b565b60045481565b60025481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6003544310156104f45761054f565b6000600454141561050b574360038190555061054f565b60045464e8d4a51000610520600354436105c0565b61052a9190611662565b6105349190611631565b60015461054191906115db565b600181905550436003819055505b565b60015481565b61055f6104e5565b6105ae333083600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b44909392919063ffffffff16565b6105b781610bcd565b50565b60035481565b600082826105ce91906116bc565b6002546105db9190611662565b905092915050565b6105eb610a78565b73ffffffffffffffffffffffffffffffffffffffff166106096104bc565b73ffffffffffffffffffffffffffffffffffffffff161461065f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065690611505565b60405180910390fd5b6106676104e5565b8060028190555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050806020015164e8d4a5100060045464e8d4a5100061071a600354436105c0565b6107249190611662565b61072e9190611631565b60015484600001516107409190611662565b61074a91906115db565b6107549190611631565b61075e91906116bc565b91505090565b61076c610a78565b73ffffffffffffffffffffffffffffffffffffffff1661078a6104bc565b73ffffffffffffffffffffffffffffffffffffffff16146107e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d790611505565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610850576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610847906114a5565b60405180910390fd5b61085981610a80565b50565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001015464e8d4a5100060015484600001546108be9190611662565b6108c89190611631565b6108d291906116bc565b90506108de3382610cc8565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4826040516109249190611565565b60405180910390a25050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061097b61085c565b8181600001600082825461098f91906116bc565b9250508190555064e8d4a5100060015482600001546109ae91906116bc565b6109b89190611631565b816001018190555081600460008282546109d291906116bc565b92505081905550610a263383600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610e329092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f4422f6ee26bc9bf257a2a195c5dc2ce10475a4680b47c473b2bfed7f92a7822583604051610a6c9190611565565b60405180910390a25050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610bc7846323b872dd60e01b858585604051602401610b6593929190611408565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610eb8565b50505050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610c1861085c565b81816000016000828254610c2c91906115db565b925050819055508160046000828254610c4591906115db565b9250508190555064e8d4a510006001548260000154610c649190611662565b610c6e9190611631565b81600101819055503373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a83604051610cbc9190611565565b60405180910390a25050565b6000600454600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d2891906113ed565b60206040518083038186803b158015610d4057600080fd5b505afa158015610d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d789190611200565b610d8291906116bc565b905080821115610ddf57610dd98382600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610e329092919063ffffffff16565b50610e2e565b610e2c8383600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610e329092919063ffffffff16565b505b5050565b610eb38363a9059cbb60e01b8484604051602401610e5192919061143f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610eb8565b505050565b6000610f1a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610f7f9092919063ffffffff16565b9050600081511115610f7a5780806020019051810190610f3a91906111a6565b610f79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7090611545565b60405180910390fd5b5b505050565b6060610f8e8484600085610f97565b90509392505050565b606082471015610fdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd3906114c5565b60405180910390fd5b610fe5856110ab565b611024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101b90611525565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161104d91906113d6565b60006040518083038185875af1925050503d806000811461108a576040519150601f19603f3d011682016040523d82523d6000602084013e61108f565b606091505b509150915061109f8282866110be565b92505050949350505050565b600080823b905060008111915050919050565b606083156110ce5782905061111e565b6000835111156110e15782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111159190611483565b60405180910390fd5b9392505050565b6000813590506111348161196b565b92915050565b60008151905061114981611982565b92915050565b60008135905061115e81611999565b92915050565b60008151905061117381611999565b92915050565b60006020828403121561118f5761118e6117ed565b5b600061119d84828501611125565b91505092915050565b6000602082840312156111bc576111bb6117ed565b5b60006111ca8482850161113a565b91505092915050565b6000602082840312156111e9576111e86117ed565b5b60006111f78482850161114f565b91505092915050565b600060208284031215611216576112156117ed565b5b600061122484828501611164565b91505092915050565b60008060408385031215611244576112436117ed565b5b60006112528582860161114f565b92505060206112638582860161114f565b9150509250929050565b611276816116f0565b82525050565b6000611287826115a9565b61129181856115bf565b93506112a181856020860161175c565b80840191505092915050565b6112b681611738565b82525050565b60006112c7826115b4565b6112d181856115ca565b93506112e181856020860161175c565b6112ea816117f2565b840191505092915050565b60006113026026836115ca565b915061130d82611803565b604082019050919050565b60006113256026836115ca565b915061133082611852565b604082019050919050565b60006113486013836115ca565b9150611353826118a1565b602082019050919050565b600061136b6020836115ca565b9150611376826118ca565b602082019050919050565b600061138e601d836115ca565b9150611399826118f3565b602082019050919050565b60006113b1602a836115ca565b91506113bc8261191c565b604082019050919050565b6113d08161172e565b82525050565b60006113e2828461127c565b915081905092915050565b6000602082019050611402600083018461126d565b92915050565b600060608201905061141d600083018661126d565b61142a602083018561126d565b61143760408301846113c7565b949350505050565b6000604082019050611454600083018561126d565b61146160208301846113c7565b9392505050565b600060208201905061147d60008301846112ad565b92915050565b6000602082019050818103600083015261149d81846112bc565b905092915050565b600060208201905081810360008301526114be816112f5565b9050919050565b600060208201905081810360008301526114de81611318565b9050919050565b600060208201905081810360008301526114fe8161133b565b9050919050565b6000602082019050818103600083015261151e8161135e565b9050919050565b6000602082019050818103600083015261153e81611381565b9050919050565b6000602082019050818103600083015261155e816113a4565b9050919050565b600060208201905061157a60008301846113c7565b92915050565b600060408201905061159560008301856113c7565b6115a260208301846113c7565b9392505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006115e68261172e565b91506115f18361172e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156116265761162561178f565b5b828201905092915050565b600061163c8261172e565b91506116478361172e565b925082611657576116566117be565b5b828204905092915050565b600061166d8261172e565b91506116788361172e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116b1576116b061178f565b5b828202905092915050565b60006116c78261172e565b91506116d28361172e565b9250828210156116e5576116e461178f565b5b828203905092915050565b60006116fb8261170e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006117438261174a565b9050919050565b60006117558261170e565b9050919050565b60005b8381101561177a57808201518184015260208101905061175f565b83811115611789576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5374616b696e673a3a62616420616374696f6e00000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b611974816116f0565b811461197f57600080fd5b50565b61198b81611702565b811461199657600080fd5b50565b6119a28161172e565b81146119ad57600080fd5b5056fea2646970667358221220a753ff6ecc3162f2d8665a7d7c9127b53fdb37c3a1bf1442d084c7c47ce053bc64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 740,
        "contract": "contracts/Staking.sol:Staking",
        "label": "accRewardPerShare",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 742,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardPerBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 744,
        "contract": "contracts/Staking.sol:Staking",
        "label": "lastRewardBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 746,
        "contract": "contracts/Staking.sol:Staking",
        "label": "totalStaked",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 751,
        "contract": "contracts/Staking.sol:Staking",
        "label": "userInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(UserInfo)738_storage)"
      },
      {
        "astId": 754,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakedToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)181"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)181": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)738_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Staking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)738_storage"
      },
      "t_struct(UserInfo)738_storage": {
        "encoding": "inplace",
        "label": "struct Staking.UserInfo",
        "members": [
          {
            "astId": 735,
            "contract": "contracts/Staking.sol:Staking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 737,
            "contract": "contracts/Staking.sol:Staking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}